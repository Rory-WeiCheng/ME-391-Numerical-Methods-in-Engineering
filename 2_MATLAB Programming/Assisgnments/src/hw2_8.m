clear all
clc

% 蒙特卡罗算法，利用半径为1的圆面积为pi，其外切正方形面积为4
% 产生大量均匀分布的二维点，计算落在单位圆和单位正方形的数量之比，结果乘以4便得到pi的近似值
N=1000:1000:1000000;
for i=1:1000
    rng('shuffle');                 % 根据当前时间为随机数生成器提供种子，这样rand会在每次调用 rng 时生成不同的数字序列
    x = -1+2*rand(N(i),1);          %二维随机均布的x坐标，x: [-1,1]
    rng('shuffle');                 % 再次初始化随机发生器，与上次不同，将产生独立的随机数
    y = -1+2*rand(N(i),1);          %二维样本的y坐标, y:[-1:1]
    s = sum(x.^2+y.^2 <= 1);        %计算落在单位圆内的点数
    pi_est(i) = s/N(i)*4;           %计算pi的估计值
end

% 按题目要求绘图，直观表达
plot(N,pi_est,'-r','LineWidth',1.5)
hold on
plot([N(1) N(end)],[pi pi],'-k','LineWidth',2)
title('使用蒙特卡洛算法估算圆周率 取点数与估算值关系图')
legend('估算值','准确值')
xlabel('取随机点数N')
ylabel('\pi')